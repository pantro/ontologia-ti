# -*- coding: utf-8 -*-
"""Ontologia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oF1HyZB6v9c45QyJTs62yvlcHfesgjrV
"""

!pip install owlready2

from google.colab import drive
drive.mount('/content/drive')

!ls "./drive/MyDrive/Colab Notebooks/ontologias/"

from owlready2 import *

world = World()
#Importando ontologia: Lembrar o caminho onde a ontologia foi adicionada
#mit = get_ontology("./drive/MyDrive/Colab Notebooks/MO656/mit.owl").load()
mit = get_ontology("./drive/MyDrive/Colab Notebooks/ontologias/mit.owl").load()

#Classes de ontologia
list(mit.classes())

#Propriedades do objeto
list(mit.object_properties())

#Propriedades de dados
list(mit.data_properties())

"""#Criação de instâncias de cada classe da ontologia."""

def criarID (numero:int):
  resultado = ''
  if numero > 98:
    resultado = str(numero+1)
  elif numero > 8:
    resultado = '0'+str(numero+1)
  else:
    resultado = '00'+str(numero+1)

  return resultado

#Crie empresa
def criarEmpresa(nome:str, localizacao:str):
  #Crie ID
  id_empresa = 'E_'+(criarID(len(mit.Empresa.direct_instances())))
  #Crie Instancia
  empresa = mit.Empresa(id_empresa)
  #Data properties
  empresa.tem_id_empresa = [id_empresa]
  empresa.tem_nome_empresa = [nome.lower()]
  empresa.tem_localizacao_empresa = [localizacao]

  return empresa

#Crie comprador
def criarComprador(nome:str, localizacao:str):
  #Crie ID
  id_comprador = 'C_'+(criarID(len(mit.Comprador_TI.instances())))
  #Crie Instancia
  comprador = mit.Comprador_TI(id_comprador)
  #Data properties
  comprador.tem_id_empresa = [id_comprador]
  comprador.tem_nome_empresa = [nome.lower()]
  comprador.tem_localizacao_empresa = [localizacao]

  return comprador

#Crie vendedor
def criarVendedor(nome:str, localizacao:str):
  #Crie ID
  id_vendedor = 'V_'+(criarID(len(mit.Vendedor_TI.instances())))
  #Crie Instancia
  vendedor = mit.Vendedor_TI(id_vendedor)
  #Data properties
  vendedor.tem_id_empresa = [id_vendedor]
  vendedor.tem_nome_empresa = [nome.lower()]
  vendedor.tem_localizacao_empresa = [localizacao]

  return vendedor

#Crie Projeto
def criarProjeto(nome:str, resumo:str):
  #Crie ID
  id_projeto = 'P_'+(criarID(len(mit.Projeto.instances())))
  #Crie Instancia
  projeto = mit.Projeto(id_projeto)
  #Data properties
  projeto.tem_id_projeto = [id_projeto]
  projeto.tem_nome_projeto = [nome.lower()]
  projeto.tem_resumo_projeto = [resumo]

  return projeto

#Crie Perfil_TI
def criarPerfilTI(nome:str):
  #Crie ID
  id_perfil_ti = 'PTI_'+(criarID(len(mit.Perfil_TI.instances())))
  #Crie Instancia
  perfil_ti = mit.Perfil_TI(id_perfil_ti)
  #Data properties
  perfil_ti.tem_id_perfil_ti = [id_perfil_ti]
  perfil_ti.tem_nome_perfil_ti = [nome.lower()]

  return perfil_ti

#Crie Tecnologia
def criarTecnologia(nome:str):
  #Crie ID
  id_tecnologia = 'T_'+(criarID(len(mit.Tecnologia.instances())))
  #Crie Instancia
  tecnologia = mit.Tecnologia(id_tecnologia)
  #Data properties
  tecnologia.tem_id_tecnologia = [id_tecnologia]
  tecnologia.tem_nome_tecnologia = [nome.lower()]

  return tecnologia

#Crie Tecnologia
def criarBancoDados(nome:str):
  #Crie ID
  id_bd = 'BD_'+(criarID(len(mit.Banco_Dados.instances())))
  #Crie Instancia
  bd = mit.Banco_Dados(id_bd)
  #Data properties
  bd.tem_id_tecnologia = [id_bd]
  bd.tem_nome_tecnologia = [nome.lower()]

  return bd

#Crie Relacional
def criarRelacional(nome:str):
  #Crie ID
  id_bdr = 'BDR_'+(criarID(len(mit.Relacional.instances())))
  #Crie Instancia
  bdr = mit.Relacional(id_bdr)
  #Data properties
  bdr.tem_id_tecnologia = [id_bdr]
  bdr.tem_nome_tecnologia = [nome.lower()]

  return bdr

#Crie Nao Relacional
def criarNaoRelacional(nome:str):
  #Crie ID
  id_bdnr = 'BDNR_'+(criarID(len(mit.Nao_Relacional.instances())))
  #Crie Instancia
  bdnr = mit.Nao_Relacional(id_bdnr)
  #Data properties
  bdnr.tem_id_tecnologia = [id_bdnr]
  bdnr.tem_nome_tecnologia = [nome.lower()]

  return bdnr

#Crie frontend
def criarFrontend(nome:str):
  #Crie ID
  id_frontend = 'F_'+(criarID(len(mit.Frontend.instances())))
  #Crie Instancia
  frontend = mit.Frontend(id_frontend)
  #Data properties
  frontend.tem_id_tecnologia = [id_frontend]
  frontend.tem_nome_tecnologia = [nome.lower()]

  return frontend

#Crie backend
def criarBackend(nome:str):
  #Crie ID
  id_backend = 'B_'+(criarID(len(mit.Backend.instances())))
  #Crie Instancia
  backend = mit.Backend(id_backend)
  #Data properties
  backend.tem_id_tecnologia = [id_backend]
  backend.tem_nome_tecnologia = [nome.lower()]

  return backend

#Crie Outras
def criarOutras(nome:str):
  #Crie ID
  id_outras = 'T_'+(criarID(len(mit.Outras.instances())))
  #Crie Instancia
  outras = mit.Outras(id_outras)
  #Data properties
  outras.tem_id_tecnologia = [id_outras]
  outras.tem_nome_tecnologia = [nome.lower()]

  return outras

#Crie Palavra Chave
def criarPalavraChave(nome:str):
  #Crie ID
  id_palavra_chave = 'PC_'+(criarID(len(mit.Palavra_Chave.instances())))
  #Crie Instancia
  palavra_chave = mit.Palavra_Chave(id_palavra_chave)
  #Data properties
  palavra_chave.tem_id_palavra_chave = [id_palavra_chave]#atributo id palavra chave
  palavra_chave.tem_nome_palavra_chave = [nome.lower()]#atributo nome palavra chave

  return palavra_chave

def procurarEmpresa(nome:str):
  empresa = list(default_world.sparql("""
      SELECT ?p WHERE {
        ?p <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_empresa> ?? . 
      } """, [nome.lower()]))
  if empresa:
    return empresa[0][0]
  else:
    return empresa

def procurarPalavraChave(resumo:str):
  array_pc = list()
  query_pc = list(default_world.sparql("""
      SELECT ?p WHERE {
        ?y <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_empresa> 'admin' .
        ?y <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?x .
        ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?p .
      } """))
  
  for x in query_pc:
    if x[0] in resumo:
      array_pc.append(x[0])
    
  return array_pc

def procurarObjetoPalavraChave(empresa, nome_pc:str):
  objeto_pc = ''
  query_pc = list(default_world.sparql("""
      SELECT DISTINCT ?pc WHERE {
        ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
        ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
      } """, [empresa, pc]))
  if query_pc:
    objeto_pc = query_pc[0][0]
    
  return objeto_pc

def procurarObjetoPerfilTI(empresa, nome_pti:str):
  objeto_pti = ''
  query_pti = list(default_world.sparql("""
      SELECT DISTINCT ?pti WHERE {
        ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
        ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?pti .
        ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?? .
      } """, [empresa, nome_pti]))
  
  if query_pti:
    objeto_pti = query_pti[0][0]
    
  return objeto_pti

def procurarObjetoTecnologia(empresa, nome_pti:str, nome_tc:str):
  objeto_tc = ''
  query_tc = list(default_world.sparql("""
      SELECT DISTINCT ?tc WHERE {
        ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
        ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?pti .
        ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?? .
        ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_tecnologia> ?tc .
        ?tc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_tecnologia> ?? .
      } """, [empresa, nome_pti, nome_tc]))
  
  if query_tc:
    objeto_tc = query_tc[0][0]
    
  return objeto_tc

def mostrarRecomendacao(empresa, array_pc:list):
  array_pc_geral = list()
  array_pc_personalizada = list()

  for pc in array_pc:
    query_pc = list(default_world.sparql("""
        SELECT ?p WHERE {
          ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?p .
          ?p <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? . 
        } """, [empresa, pc]))
    if query_pc:
      array_pc_personalizada.append(pc)
    else :
      array_pc_geral.append(pc)

  recomendacaoPersonalizada(empresa, array_pc_personalizada)
  recomendacaoPorUsuario(array_pc)
  recomendacaoGeral(array_pc_geral)
  return [array_pc_personalizada, array_pc_geral]

def recomendacaoGeral (array_pc_geral:list):
  dict_result = dict()
  for pc in array_pc_geral:
    #Você tem que pesquisar todos os perfis que possuem essa palavra-chave
    query_nome_perfil_ti = list(default_world.sparql("""
      SELECT DISTINCT ?p WHERE {
        ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
        ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?z .
        ?z <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?p .
      } """, [pc]))
    if query_nome_perfil_ti:
      for y in query_nome_perfil_ti:
        query_nome_tecnologia = list(default_world.sparql("""
          SELECT DISTINCT ?p WHERE {
            ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?? .
            ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_tecnologia> ?z .
            ?z <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_tecnologia> ?p .
          } """, [y[0]]))
        if query_nome_tecnologia:
          array_nome_tecnologia =list()
          for tc in query_nome_tecnologia:
            array_nome_tecnologia.append(tc[0])
          #Forma minha estrutura para armazenar perfis e suas respectivas tecnologias
          dict_result[y[0]] = array_nome_tecnologia
  print('RECOMENDACOES GERAIS')
  print('--------------------')
  mostrarTela(dict_result)
  print('--------------------')
  return 

def recomendacaoPersonalizada(empresa, array_pc_personalizada:list):
  dict_result = dict()
  for pc in array_pc_personalizada:
    #Você tem que pesquisar todos os perfis que possuem essa palavra-chave
    query_nome_perfil_ti = list(default_world.sparql("""
      SELECT DISTINCT ?p WHERE {
        ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?x .
        ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
        ?x <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?z .
        ?z <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?p .
      } """, [empresa, pc]))
      
    if query_nome_perfil_ti:
      for pti in query_nome_perfil_ti:
        query_nome_tecnologia = list(default_world.sparql("""
          SELECT DISTINCT ?r WHERE {
            ?? <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
            ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
            ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?pti .
            ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?? .
            ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_tecnologia> ?tc .
            ?tc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_tecnologia> ?r .
          } """, [empresa, pc, pti[0]]))
        if query_nome_tecnologia:
          array_nome_tecnologia =list()
          for tc in query_nome_tecnologia:
            array_nome_tecnologia.append(tc[0])
          #Forma minha estrutura para armazenar perfis e suas respectivas tecnologias
          dict_result[pti[0]] = array_nome_tecnologia
  print('RECOMENDACOES PERSONALIZADAS')
  print('----------------------------')
  mostrarTela(dict_result)
  print('----------------------------')
  return 

def recomendacaoPorUsuario(array_pc:list):
  dict_result = dict()
  for pc in array_pc:
    #Você tem que pesquisar todos os perfis que possuem essa palavra-chave
    query_nome_perfil_ti = list(default_world.sparql("""
      SELECT DISTINCT ?nome_pti WHERE {
        ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
        ?c <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
        ?c <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_empresa> ?nome_c .
        FILTER (?nome_c != 'admin') .
        ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?pti .
        ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?nome_pti .
      } """, [pc]))
      
    if query_nome_perfil_ti:
      for pti in query_nome_perfil_ti:
        query_nome_tecnologia = list(default_world.sparql("""
          SELECT DISTINCT ?nome_tc WHERE {
            ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_palavra_chave> ?? .
            ?c <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_palavra_chave> ?pc .
            ?c <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_empresa> ?nome_c .
            FILTER (?nome_c != 'admin') .
            ?pc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_perfil_ti> ?pti .
            ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?? .
            ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_tecnologia> ?tc .
            ?tc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_tecnologia> ?nome_tc .
          } """, [pc,pti[0]]))
        
        if query_nome_tecnologia:
          array_nome_tecnologia =list()
          for tc in query_nome_tecnologia:
            array_nome_tecnologia.append(tc[0])
          #Forma minha estrutura para armazenar perfis e suas respectivas tecnologias
          dict_result[pti[0]] = array_nome_tecnologia
  print('RECOMENDACOES POR USUARIO')
  print('----------------------------')
  mostrarTela(dict_result)
  print('----------------------------')
  return 

def mostrarTela(dict_result):
  for item in dict_result:
    print(item)
    for tc in dict_result[item]:
      print('- '+tc)
  return

def mostrarPerfilTI():
  array_nome_perfil_ti = list()
  query_perfil_ti = list(default_world.sparql("""
          SELECT DISTINCT ?nome_pti WHERE {
            ?pti <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_perfil_ti> ?nome_pti .
          } """))
  cont = 1
  for pti in query_perfil_ti:
    print(str(cont),'.-',pti[0].upper())
    cont+=1
    array_nome_perfil_ti.append(pti[0])

  return array_nome_perfil_ti

def mostrarTecnologia():
  array_nome_tecnologia = list()
  query_tecnologia = list(default_world.sparql("""
          SELECT DISTINCT ?nome_tc WHERE {
            ?tc <http://www.semanticweb.org/pantro/ontologies/2022/8/match#tem_nome_tecnologia> ?nome_tc .
          } """))
  cont = 1
  for tc in query_tecnologia:
    print(str(cont),'.-',tc[0].upper())
    cont+=1
    array_nome_tecnologia.append(tc[0])

  return array_nome_tecnologia

#Creando admin
admin = criarComprador('admin', 'campinas')
pc_1 = criarPalavraChave('servidor')
pc_2 = criarPalavraChave('pagina web')

pti_1 = criarPerfilTI('soluciones cloud computing')#servidor
pti_2 = criarPerfilTI('soluciones crm')#servidor
pti_3 = criarPerfilTI('soluciones de desenvolvimento de software')#pagina web'

#Tecnologias
tc_1 = criarOutras('alibaba')#soluciones cloud computing
tc_2 = criarOutras('aws')#soluciones cloud computing
tc_3 = criarOutras('azure')#soluciones cloud computing
tc_4 = criarNaoRelacional('mongodb')#soluciones cloud computing
tc_5 = criarRelacional('mysql')#soluciones cloud computing
tc_6 = criarRelacional('oracle')#soluciones cloud computing


tc_7 = criarRelacional('oracle')#soluciones crm
tc_8 = criarOutras('powerbi')#soluciones crm
tc_9 = criarOutras('sap')#soluciones crm
tc_10 = criarOutras('sas')#soluciones crm

tc_11 = criarFrontend('angular')#Soluciones de Desenvolvimento de Software
tc_12 = criarBackend('c++')#Soluciones de Desenvolvimento de Software
tc_13 = criarFrontend('html')#Soluciones de Desenvolvimento de Software
tc_14 = criarFrontend('css')#Soluciones de Desenvolvimento de Software
tc_15 = criarNaoRelacional('mongodb')#Soluciones de Desenvolvimento de Software
tc_16 = criarRelacional('mysql')#Soluciones de Desenvolvimento de Software
tc_17 = criarRelacional('oracle')#Soluciones de Desenvolvimento de Software
tc_18 = criarBackend('php')#Soluciones de Desenvolvimento de Software
tc_19 = criarRelacional('postgresql')#Soluciones de Desenvolvimento de Software
tc_20 = criarBackend('python')#Soluciones de Desenvolvimento de Software
tc_21 = criarFrontend('reactjs')#Soluciones de Desenvolvimento de Software

#Relacionando
admin.tem_palavra_chave = [pc_1, pc_2]
pc_1.tem_perfil_ti = [pti_1, pti_2]
pc_2.tem_perfil_ti = [pti_3]
pti_1.tem_tecnologia = [tc_1, tc_2, tc_3, tc_4, tc_5, tc_6 ]
pti_2.tem_tecnologia = [tc_7, tc_8, tc_9, tc_10]
pti_3.tem_tecnologia = [tc_11, tc_12, tc_13, tc_14, tc_15, tc_16, tc_17, tc_18, tc_18, tc_20, tc_21]

"""# Primeira cenário"""

#Exemplo 1
exemplo_1 = criarComprador('exemplo 1','campinas')
mostrarRecomendacao(exemplo_1, ['servidor'])

"""#segundo cenário:"""

#Creando comprador teste 1
c_teste_1 = criarComprador('teste 1', 'sao paulo')
pc_teste_1 = criarPalavraChave('pagina web')
pti_teste_1 = criarPerfilTI('Soluciones de Desenvolvimento de Software')
tc_teste_1 = criarTecnologia('php')
tc_teste_2 = criarTecnologia('html')
tc_teste_3 = criarTecnologia('mysql')
#Relacionando
c_teste_1.tem_palavra_chave = [pc_teste_1]
pc_teste_1.tem_perfil_ti = [pti_teste_1]
pti_teste_1.tem_tecnologia = [tc_teste_1, tc_teste_2, tc_teste_3]

#Creando comprador teste 2
c_teste_2 = criarComprador('teste 2', 'minas gerais')
pc_teste_2 = criarPalavraChave('pagina web')
pti_teste_2 = criarPerfilTI('Soluciones de Desenvolvimento de Software')
tc_teste = criarTecnologia('python')
#Relacionando
c_teste_2.tem_palavra_chave = [pc_teste_2]
pc_teste_2.tem_perfil_ti = [pti_teste_2]
pti_teste_2.tem_tecnologia = [tc_teste]

#Exemplo 2
exemplo_2 = criarComprador('exemplo 2','barao geral')
mostrarRecomendacao(exemplo_2, ['pagina web'])

"""#Terceiro cenário:"""

mostrarRecomendacao(c_teste_1, ['pagina web'])

"""#AMBIENTE DE PRODUÇÃO

"""

print("BEM-VINDO")
print("Você já tem uma conta? Digite o número escolhido.")
print("1.- Sim")
print("2.- Não")
option = input()
print('---------------------------------------------------------')
print("Digite o nome da sua empresa.")
nome = input().lower()
if option == '1':
  #- OBJETO EMPRESA
  empresa = procurarEmpresa(nome)
  if empresa:
    print("Nombre de la empresa es: ")
    print(empresa)
  else:
    print("Nao existe empresa")
else:
  print("Insira a localização da sua empresa.")
  localizacao = input().lower()
  print("Que tipo é a sua empresa?. Digite o número escolhido.")
  print("1.- Comprador")
  print("2.- Vendedor")
  option = input()
  
  if option == '1':
    #- OBJETO EMPRESA
    empresa = criarComprador(nome, localizacao)
  else:
    #- OBJETO EMPRESA
    empresa = criarVendedor(nome, localizacao)
if empresa and empresa.is_a[0] == mit.Comprador_TI:
  print('---------------------------------------------------------')
  print("O senhor quer criar um PROJETO?")
  print("1.- Sim")
  print("2.- Não")
  option = input().lower()
  if option == '1':
    print('---------------------------------------------------------')
    print("Digite o nome da seu projeto.")
    nome = input().lower()
    print("Insira um resumo da seu projeto.")
    resumo = input().lower()
    #- OBJETO PROJETO
    projeto = criarProjeto(nome, resumo)
    print("Nome do projeto é: ")
    print(projeto)
    #Vincular EMPRESA ao PROJETO
    empresa.tem_projeto = [projeto] 
    array_palavra_chave = procurarPalavraChave(resumo)
    obj_pc_personalizada = list()
    obj_pc_geral = list()
    if array_palavra_chave:
      [array_pc_personalizada, array_pc_geral] = mostrarRecomendacao(empresa,array_palavra_chave)
      for pc in array_pc_personalizada:
        aux_obj = procurarObjetoPalavraChave(empresa, pc)
        if aux_obj != '':
          obj_pc_personalizada.append(aux_obj)
      
      for pc in array_pc_geral:
        aux_pc = criarPalavraChave(pc)
        obj_pc_geral.append(aux_pc)
        #Vincular EMPRESA a PALAVRA_CHAVE geral
        empresa.tem_palavra_chave.append(aux_pc)
    else:
      print("O resumo nao tem palvras chaves")
    
    #ENTRADA DE DADOS PARA PERFIL_TI
    aux_bool = True
    while(aux_bool):
      print("Escolha um Perfil de TI para o seu projeto.")
      array_nome_perfil_ti = mostrarPerfilTI()
      num_perfil_ti = input()
      num_perfil_ti = int(num_perfil_ti)
      if num_perfil_ti <= len(array_nome_perfil_ti):
        print(array_nome_perfil_ti[num_perfil_ti-1])
        aux_obj = procurarObjetoPerfilTI(empresa, array_nome_perfil_ti[num_perfil_ti-1])        
        if aux_obj != '':
          perfil_ti = aux_obj
        else :
          perfil_ti = criarPerfilTI(array_nome_perfil_ti[num_perfil_ti-1])
        #Vincular PROJETO ao PERFIL_TI
        projeto.tem_perfil_ti = [perfil_ti]
        #Vincular PALAVRA_CHAVE ao PERFIL_TI personalizado
        for pc in obj_pc_personalizada:
          cont = 0
          for pti in pc.tem_perfil_ti:
            if pti.tem_nome_perfil_ti == perfil_ti.tem_nome_perfil_ti:
              pc.tem_perfil_ti[cont] = perfil_ti
            cont+=1

        #Vincular PALAVRA_CHAVE ao PERFIL_TI geral
        for pc in obj_pc_geral:
          pc.tem_perfil_ti = [perfil_ti]

        aux_bool = False
      else:
        print("Opção errada")

    #- OBJETO TECNOLOGIA
    aux_bool = True
    set_tecnologia = set()
    while (aux_bool):
      print("Escolha uma Tecnologia para o seu projeto.")
      array_nome_tecnologia = mostrarTecnologia()
      print('0 .- Se você não quiser mais inserir mais tecnologias')
      num_tecnologia = input()
      num_tecnologia = int(num_tecnologia)
      if num_tecnologia == 0:
        aux_bool = False
      else :  
        if num_tecnologia <= len(array_nome_tecnologia):
          set_tecnologia.add(array_nome_tecnologia[num_tecnologia-1])
          print(set_tecnologia)
    #Vincular PERFIL_TI ao TECNOLOGIA
    #perfil_ti.tem_tecnologia = []
    for tc in set_tecnologia:
      aux_obj = procurarObjetoTecnologia(empresa, perfil_ti.tem_nome_perfil_ti[0], tc)
      if aux_obj == '':
        perfil_ti.tem_tecnologia.append(criarTecnologia(tc))

print("Muito obrigado por usar nosso serviço.")

# now we can save without mixing the ontologies
#onto.save(file=r"./drive/MyDrive/Colab Notebooks/ontologias/teste_owlready.rdf", format="rdfxml")
#onto2.save(file=r"./drive/MyDrive/Colab Notebooks/ontologias/teste_owlready2.rdf", format="rdfxml")